#!/usr/bin/python3

from tf2_ros import *
from tf2_geometry_msgs import *
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import OccupancyGrid
from kobuki_ros_interfaces.msg import *
from visualization_msgs.msg import Marker

# Parameters
MODE_THRESHOLD = 1000
THRESHOLD_DIST = 0.4
LINEAR_SPEED = 0.3
ANGULAR_SPEED = 1.3
LIMITE_ANGLE = 1.1 # seuil angle detection obstacle
ANGLE_STRAIGHT = 0.2 # Seuil angle alignÃ© sur l'objectif

def infiniteTalk():
    # Initialize ROS node with ROS client
    rclpy.init()
    aNode = Node('basic_move')
    control = StraightCtrl(aNode)
    # Start infinite loop
    rclpy.spin(aNode)
    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

class StraightCtrl:
    def __init__(self, node):
        self.rosNode = node
        # Transform tool:
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self.rosNode)

        self.rosNode.declare_parameter( 'topic4cmd', '' )
        self.param_node = self.rosNode.get_parameter( 'topic4cmd' ).value
        print(self.param_node)

        self.rosNode.create_subscription( OccupancyGrid, 'map', self.update_map, 10)
        self.nav_publisher= self.rosNode.create_publisher(Twist, self.param_node, 10 )
        self.marker_publisher = self.rosNode.create_publisher(Marker, 'marker_goal', 10 )

        # Map positioning
        self.map = OccupancyGrid()
        self.pose_on_map = Pose()

        # Node Attribute:
        self.local_frame= 'base_link'
        self.global_goal= Pose()
        self.global_goal.position.x= (float)(1)
        self.global_goal.position.y= (float)(2)

        # Navigation
        self.rosNode.create_subscription( LaserScan, 'scan', self.scan_callback, 10)
        self.rosNode.create_subscription( BumperEvent, '/events/bumper', self.bumper_callback, 10)
        self.rosNode.create_subscription( WheelDropEvent, '/events/wheel_drop', self.wheeldrop_callback, 10)
        self.rosNode.create_subscription( ButtonEvent, '/events/button', self.button_callback, 10)
        self.led1_publisher= self.rosNode.create_publisher(Led, '/commands/led1', 10 )
        self.sound_publisher= self.rosNode.create_publisher(Sound, '/commands/sound', 10 )
        self._timer = self.rosNode.create_timer(0.005, self.control_callback)
        self._obstacle_left = False
        self._obstacle_right = False
        self.angle_mid = 0.0
        self.bumper = False
        self.wheeldrop = False
        self.straight_velocity = 0
        led1 = Led()
        led1.value = 0
        self.led1_publisher.publish(led1)

        # mode controle
        self.mode_control = 0

        node.create_timer(0.1, self.control_callback)
        node.create_timer(0.1, self.update_self_pose)
        node.create_timer(10, self.update_goal_pose)
    
    def update_self_pose(self):
        currentTime= rclpy.time.Time()
        pose = Pose()
        pose.position.x = 0.0
        pose.position.y = 0.0
        pose.position.z = 0.0
        # Get Transformation
        try:
            stampedTransform= self.tf_buffer.lookup_transform(
                        'map',
                        self.local_frame,
                        currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException, tf2_ros.TransformException) as tex:
            self.rosNode.get_logger().info( f'Could not transform the goal into map: {tex}')
            return

        self.pose_on_map = tf2_geometry_msgs.do_transform_pose(pose, stampedTransform )
        

    def control_callback(self):
        marker = Marker()
        marker.scale.x = 0.05
        marker.scale.y = 0.05
        marker.scale.z = 0.05
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0
        marker.color.a = 1.0

        marker.pose = self.global_goal
        marker.type = 1
        marker.action = 0
        marker.id = 1
        marker.header.frame_id = 'map'
        self.marker_publisher.publish(marker)
        # print(self.pose_on_map)
        #print(self.global_goal)

        currentTime= rclpy.time.Time()
        # Get Transformation
        try:
            stampedTransform= self.tf_buffer.lookup_transform(
                        self.local_frame,
                        'odom',
                        currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException, tf2_ros.TransformException) as tex:
            self.rosNode.get_logger().info( f'Could not transform the goal into {self.local_frame}: {tex}')
            return
        
        # Compute goal into local coordinates
        localGoal = tf2_geometry_msgs.do_transform_pose( self.global_goal, stampedTransform )
        localGoal_euler_roll, localGoal_euler_pitch, localGoal_euler_yaw = euler_from_quaternion(localGoal.orientation)

        velocity = Twist()
        velocity.linear.x = 0.0
        velocity.linear.y = 0.0
        velocity.linear.z = 0.0

        velocity.angular.x = 0.0
        velocity.angular.y = 0.0
        velocity.angular.z = 0.0

        if self._obstacle_right or self._obstacle_left:
            self.mode_control = 0
        else:
            self.mode_control += 1
        
        if self.mode_control > MODE_THRESHOLD:
            print("mode suivi d'objectif")
            self.straight_velocity = ramp(self.straight_velocity, LINEAR_SPEED, 0.025)

            if localGoal.position.x < 0 and localGoal.position.x > 0.01: 
                velocity.angular.z = ANGULAR_SPEED

            elif localGoal.position.y < -ANGLE_STRAIGHT :
                velocity.angular.z = -ANGULAR_SPEED

            elif ANGLE_STRAIGHT < localGoal.position.y :
                velocity.angular.z = ANGULAR_SPEED

            elif localGoal.position.x > 0.01 :
                velocity.linear.x = self.straight_velocity
            
            elif localGoal_euler_yaw < -0.05 :
                velocity.angular.z = -ANGULAR_SPEED

            elif localGoal_euler_yaw > 0.05 :
                velocity.angular.z = ANGULAR_SPEED
        
        else:
            print("mode evitement")
            self.straight_velocity = ramp(self.straight_velocity, LINEAR_SPEED, 0.0025)
            velocity.linear.x = self.straight_velocity
            if self._obstacle_right:
                velocity.linear.x = 0.0
                velocity.angular.z = ANGULAR_SPEED
            elif self._obstacle_left:
                velocity.linear.x = 0.0
                velocity.angular.z = -ANGULAR_SPEED
            
            if self._obstacle_right and self._obstacle_left:
                velocity.linear.x = 0.0
                velocity.angular.z = -2 * ANGULAR_SPEED
        

        if self.bumper or self.wheeldrop:
            velocity.linear.x = 0.0
            velocity.angular.z = 0.0

        self.straight_velocity = velocity.linear.x
        self.nav_publisher.publish(velocity)
    

    def scan_callback(self, scanMsg):
        self._obstacle_left = False
        self._obstacle_right = False
        self.angle_mid = ( scanMsg.angle_max + scanMsg.angle_min ) / 2
        angle = scanMsg.angle_min
        for aDistance in scanMsg.ranges :
            if 0.2 < aDistance and aDistance < 5.0 and (scanMsg.angle_min + LIMITE_ANGLE <= angle <= scanMsg.angle_max - LIMITE_ANGLE ) and (angle < self.angle_mid) :
                if THRESHOLD_DIST >= aDistance:
                    self._obstacle_right = True
            if 0.2 < aDistance and aDistance < 5.0 and (scanMsg.angle_min + LIMITE_ANGLE <= angle <= scanMsg.angle_max - LIMITE_ANGLE ) and (angle >= self.angle_mid) :
                if THRESHOLD_DIST >= aDistance:
                    self._obstacle_left = True

            angle+= scanMsg.angle_increment
    
    def bumper_callback(self, bumperMsg):
        if bumperMsg.state == 1:
            self.bumper = True
            led1 = Led()
            sound = Sound()
            led1.value = 3
            sound.value = 1
            self.led1_publisher.publish(led1)
            self.sound_publisher.publish(sound)

    def wheeldrop_callback(self, wheelMsg):
        if wheelMsg.state == 1:
            self.wheeldrop = True
            led1 = Led()
            led1.value = 2
            self.led1_publisher.publish(led1)

    def button_callback(self, buttonMsg):
        if buttonMsg.state == 1 and buttonMsg.button == 0:
            self.wheeldrop = False
            self.bumper = False
            led1 = Led()
            led1.value = 0
            self.led1_publisher.publish(led1)

    def update_map(self, occupancy_grid):
        print("map update")
        self.map = occupancy_grid

    def update_goal_pose(self):
        occupancy_grid = self.map
        unknown_pixels = []
        n = len(occupancy_grid.data)
        print(n)
        for i in range(n):
            pixel = occupancy_grid.data[i]
            if i+1 < n and pixel + occupancy_grid.data[i+1] == -1:
                unknown_pixels.append([i % occupancy_grid.info.width, i//occupancy_grid.info.width])
                continue
            if i + occupancy_grid.info.width < n and pixel + occupancy_grid.data[i + occupancy_grid.info.width] == -1:
                unknown_pixels.append([i % occupancy_grid.info.width, i//occupancy_grid.info.width])
                continue
        
        a = np.array(unknown_pixels)
        mini = float('inf')
        res = []
        for pixel in a:
            pixel_in_map = (self.map.info.origin.position.x + pixel[0]*self.map.info.resolution, self.map.info.origin.position.x + pixel[1]*self.map.info.resolution)
            temp_mini = euclidean_distance((self.pose_on_map.position.x, self.pose_on_map.position.y), pixel_in_map)
            if mini > temp_mini:
                res = pixel
                mini = temp_mini
        if len(res) == 2:
            self.global_goal.position.x = float(self.map.info.origin.position.x + res[0]*self.map.info.resolution)
            self.global_goal.position.y = float(self.map.info.origin.position.y + res[1]*self.map.info.resolution)
            self.global_goal.position.z = float(0)


def euclidean_distance(a, b):
    return ((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5
        
def ramp(base, target, step):
    if base < target:
        return base+step
    elif base > target:
        return base-step
    else:
        return base

def euler_from_quaternion(quaternion):
    """
    Converts quaternion (w in last place) to euler roll, pitch, yaw
    quaternion = [x, y, z, w]
    Bellow should be replaced when porting for ROS 2 Python tf_conversions is done.
    """
    x = quaternion.x
    y = quaternion.y
    z = quaternion.z
    w = quaternion.w

    sinr_cosp = 2 * (w * x + y * z)
    cosr_cosp = 1 - 2 * (x * x + y * y)
    roll = np.arctan2(sinr_cosp, cosr_cosp)

    sinp = 2 * (w * y - z * x)
    pitch = np.arcsin(sinp)

    siny_cosp = 2 * (w * z + x * y)
    cosy_cosp = 1 - 2 * (y * y + z * z)
    yaw = np.arctan2(siny_cosp, cosy_cosp)

    return roll, pitch, yaw

# Execute the function.
if __name__ == "__main__":
    infiniteTalk()


